<program>	->	#start begin <statement list> end #finish
<statement list> -> <statement>; { <statement>; }
<statement>	->	<assignment> | read( <id list> ) #read_ids | write( <expr list> ) #write_ids | <decl>
<assignment>-> <ident> := <expression> #assign
<decl>      -> <type> <ident>
<type>      -> string | int | bool
<id list>	->	<ident> {, <ident>}
<expr list>	->	<expression> {, <expression> }
<primary>	->	( <expression> ) | <ident> | INTLIT | STRINGLIT | BOOLLIT
<ident>	    ->	ID #process
<expression>->	<term1> { or <term1> }
<term1>     -> 	<fact1> { and <fact1> }
<fact1>     ->  not <primary> | <exp2> <relation>
<relation>  ->	RELATIONOP <exp2> | lambda
<exp2>      -> 	<term2> { [+|-] <term2> }
<term2>     -> 	<sign> <fact2> { [*|/|%] <sign> <fact2> }
<sign>      ->  - | lambda
<fact2>     -> 	<ident> | INTLIT | BOOLLIT | (<expression>)

NOTE: the "-" symbol is used in both <sign> and <arith op>. They will both be characterized as the same symbol, but
I think this is okay because we can just do different things based on the function we are in.
NOTE: must choose either + or - in exp2 (meaning of [])


---------------------------------- OLD VERSION OF GRAMMAR --------------------------------

<program>	->	#start begin <statement list> end #finish
<statement list> -> <statement>; { <statement>; }
<statement>	->	<assignment> | read( <id list> ) #read_ids | write( <expr list> ) #write_ids | <decl>
<assignment>-> <ident> := <expression> #assign
<decl>      -> <type> <ident>
<type>      -> string | int | bool
<id list>	->	<ident> {, <ident>}
<expr list>	->	<expression> {, <expression> }
<expression>->	<primary> {<arith op> <primary> #infix }
<primary>	->	( <expression> ) | <ident> | ( <bool expr> ) | INTLIT | STRINGLIT | BOOLLIT
<ident>	    ->	ID #process
<arith op>	->	+ | - | / | * | %
<bool expr>	->	<term1> { or <term1> }
<term1>     -> 	<fact1> { and <fact1> }
<fact1>     ->  not <primary> | <exp2> <relation>
<relation>  ->	RELATIONOP <exp2> | lambda
<exp2>      -> 	<term2> { + <term2> }
<term2>     -> 	<sign> <fact2> { * <sign> <fact2> }
<sign>      ->  - | lambda
<fact2>     -> 	<ident> | INTLIT | BOOLLIT | (<bool expr>)

NOTE: the "-" symbol is used in both <sign> and <arith op>. They will both be characterized as the same symbol, but
I think this is okay because we can just do different things based on the function we are in.
